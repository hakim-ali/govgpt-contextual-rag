version: '3.8'

services:
  # RAG Server for local development and testing
  rag-server:
    build: .
    container_name: govgpt-rag-server-local
    ports:
      - "8100:8100"
    env_file:
      - .env
    environment:
      # Override specific Docker environment settings
      - ARTIFACT_DIR=/app/artifacts
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-network

  # RAGAS + Phoenix Service for real-time evaluation
  ragas-service:
    build:
      context: .
      dockerfile: ragas_dockerfile
    container_name: govgpt-ragas-service
    ports:
      - "8300:8300"  # RAGAS service
      - "6006:6006"   # Phoenix UI
    env_file:
      - .env.ragas
    environment:
      - PYTHONUNBUFFERED=1
      - RAGAS_SERVICE_HOST=0.0.0.0
      - RAGAS_SERVICE_PORT=8300
      - PHOENIX_HOST=0.0.0.0
      - PHOENIX_PORT=6006
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-network

  # Optional: Pipeline testing service (for integration testing)
  pipeline-test:
    build: .
    container_name: govgpt-pipeline-test
    depends_on:
      - rag-server
      - ragas-service
    environment:
      - PYTHONPATH=/app
      - RAG_SERVER_URL=http://rag-server:8100
      - RAGAS_SERVICE_URL=http://ragas-service:8300
      - ENABLE_DEBUG=true
    volumes:
      - ./:/app/pipeline
    working_dir: /app/pipeline
    command: ["python", "test_pipeline.py"]
    networks:
      - rag-network
    profiles:
      - testing

networks:
  rag-network:
    driver: bridge

# Optional: Add volumes for persistence if needed
volumes:
  artifacts:
    driver: local